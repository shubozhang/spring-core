<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- IOC uses reflection to construct an instance. An empty constructor is required-->
    <!-- id must be unique-->
    <bean id="helloWorld" class="spring.core.di.beans.HelloWorld">
        <property name="user" value="Spring"></property>
    </bean>

    <!-- 若一个 bean 有多个构造器, 如何通过构造器来为 bean 的属性赋值 -->
    <!-- 可以根据 index 和 value 进行更加精确的定位. (了解) -->
    <bean id="car" class="spring.core.di.beans.Car">
        <constructor-arg value="KUGA" index="1"></constructor-arg>
        <constructor-arg value="ChangAnFord" index="0"></constructor-arg>
        <constructor-arg value="250000" type="float"></constructor-arg>
    </bean>

    <bean id="car2" class="spring.core.di.beans.Car">
        <constructor-arg value="ChangAnMazda"></constructor-arg>
        <!-- 若字面值中包含特殊字符, 则可以使用 CDATA 来进行赋值. (了解) -->
        <constructor-arg>
            <value><![CDATA[<ATARZA>]]></value>
        </constructor-arg>
        <constructor-arg value="180" type="int"></constructor-arg>
    </bean>


    <bean id="car4" class="spring.core.di.beans.Car" p:company="GM" p:brand="GMC" p:price="24300">
    </bean>

    <!-- Inject collection -->
    <bean id="user" class="spring.core.di.beans.User">
        <property name="userName" value="Jack"></property>
        <property name="cars">
            <!-- 使用 list 元素来装配集合属性 -->
            <list>
                <ref bean="car"/>
                <ref bean="car2"/>
                <bean id ="car3" class="spring.core.di.beans.Car">
                    <constructor-arg value="Ford" name="company"></constructor-arg>
                    <constructor-arg value="Changan" name="brand"></constructor-arg>
                    <constructor-arg value="25000" name="price"></constructor-arg>
                </bean>
            </list>
        </property>
        <property name="data">
            <map>
                <entry key="Silver" value-ref="car"></entry>
                <entry key="Red" value-ref="car2"></entry>
            </map>
        </property>
    </bean>


    <bean id="dataSource" class="spring.core.di.beans.DataSource">
        <property name="properties">
            <props>
                <prop key="user">root</prop>
                <prop key="password">1234</prop>
                <prop key="jdbcUrl">jdbc:mysql://test</prop>
                <prop key="driver">jdbcDriver</prop>
            </props>
        </property>
    </bean>
    <!--声明集合类型的 bean-->
    <util:list id="Cars">
        <ref bean="car"/>
        <ref bean="car2"/>
    </util:list>

    <bean id="user2" class="spring.core.di.beans.User">
        <property name="userName" value="Rose"></property>

        <property name="cars" ref="Cars"></property>
    </bean>

    <!-- 自动装配: 只声明 bean, 而把 bean 之间的关系交给 IOC 容器来完成 -->
    <!--
        byType: 根据类型进行自动装配. 但要求 IOC 容器中只有一个类型对应的 bean, 若有多个则无法完成自动装配.
        byName: 若属性名和某一个 bean 的 id 名一致, 即可完成自动装配. 若没有 id 一致的, 则无法完成自动装配
    -->
    <bean id="address" class="spring.core.di.beans.Address">
        <property name="address" value="Reddman"></property>
    </bean>

    <bean id="person" class="spring.core.di.beans.Person" autowire="byName">
    </bean>

    <!--depends-on: bean car must be defined. -->
    <bean id="person1" class="spring.core.di.beans.Person" autowire="byName" depends-on="car">
    </bean>

    <!--byType: 根据类型进行自动装配. 但要求 IOC 容器中只有一个类型对应的 bean, 若有多个则无法完成自动装配.-->
    <!--<bean id="person2" class="spring.core.di.beans.Person" autowire="byType" />-->
    <bean id="account" class="spring.core.di.beans.Account" autowire="byType">
        <property name="name" value="John"></property>
    </bean>
    <bean id="bank" class="spring.core.di.beans.Bank" >
        <property name="id" value="101"></property>
        <property name="bankName" value="Chase"></property>
    </bean>

    <!-- Bean inheritance -->
    <bean id="address2" p:address="Sherman" parent="address"></bean>

    <!--Define an abstract bean only for inheritance. This bean cannot be instantiated -->
    <bean id="addressAbstract" class="spring.core.di.beans.Address" p:address="home" abstract="true"></bean>

    <bean id="address3" parent="addressAbstract"></bean>
    <bean id="address4" p:address="Xiaogan" parent="addressAbstract"></bean>


    <!-- 默认情况下 bean 是单例的! -->
    <!-- 但有的时候, bean 就不能使单例的. 例如: Struts2 的 Action 就不是单例的! 可以通过 scope 属性来指定 bean 的作用域 -->
    <!--
        prototype: 原型的. 每次调用 getBean 方法都会返回一个新的 bean. 且在第一次调用 getBean 方法时才创建实例
        singleton: 单例的. 每次调用 getBean 方法都会返回同一个 bean. 且在 IOC 容器初始化时即创建 bean 的实例. 默认值
    -->
    <bean id="carPrototype" class="spring.core.di.beans.Car" scope="prototype">
        <constructor-arg value="KUGA" index="1"></constructor-arg>
        <constructor-arg value="ChangAnFord" index="0"></constructor-arg>
        <constructor-arg value="250000" type="float"></constructor-arg>
    </bean>

    <bean id="db_source" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="user" value="root"></property>
        <property name="password" value="1230"></property>
        <property name="driverClass" value="com.mysql.jdbc.Driver"></property>
        <property name="jdbcUrl" value="jdbc:mysql:///test"></property>
    </bean>


    <context:property-placeholder location="di_db.properties"></context:property-placeholder>
    <bean id="db_properties" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="user" value="${user}"></property>
        <property name="password" value="${password}"></property>
        <property name="driverClass" value="${driverClass}"></property>
        <property name="jdbcUrl" value="${jdbcUrl}"></property>
    </bean>

    <!-- Using SpEL to assign a value -->
    <bean id="addressEL" class="spring.core.di.beans.Address">
        <property name="address" value="#{'505 Main St'}"></property>
    </bean>

    <!-- Using SpEL to assign a static property -->
    <bean id="carEL" class="spring.core.di.beans.Car"
          p:brand="Audi"
          p:company="Audi"
          p:price="250000"
          p:length="#{T(java.lang.Math).PI * 50}"></bean>

    <!-- Using SpEL to refer another bean, bean's field and operator -->
    <bean id="personEL" class="spring.core.di.beans.Person"
          p:car="#{carEL}"
          p:address="#{addressEL}"
          p:info="#{carEL.price > 300000 ? 'Gold' : 'White'}"  >
    </bean>

    <bean id="carBeanCycle" class="spring.core.di.beans.Car" init-method="init" destroy-method="destroy"
          p:company="BMW"
          p:price="65000"
          p:brand="X5">

    </bean>

    <!-- id is not required. IOC 自动识别PostProcessor -->
    <!--
    1. Use constructor or factory method to create bean instance
    2. Setup bean's properties and its associated bean
    3. Pass bean instance to postProcessBeforeInitialization method
    4. Invoke bean's init() method
    5. Pass bean instance to postProcessAfterInitialization method
    6. Bean is ready for use.
    7. When container is closed, invoke bean's destory() method

    -->
    <bean class="spring.core.di.beans.MyBeanPostProcessor"></bean>


    <!-- Using static factory to create bean -->
    <!--
         class: point to static factory class
         factory-method: point to static factory method
         constructor-arg: pass arg to factory-method
    -->
    <bean id="carFromStaticFactory" class="spring.core.di.beans.CarStaticFactory" factory-method="getCar">
        <constructor-arg value="ford"></constructor-arg>
    </bean>

    <!-- Using static factory to create bean -->
    <!--
         class: point to instance factory class
         factory-method: point to instance factory method
         constructor-arg: pass arg to factory-method
    -->
    <!-- Set carInstanceFactory instance -->
    <bean id="carInstanceFactory" class="spring.core.di.beans.CarInstanceFactory"></bean>
    <!-- Using carInstanceFactory to create car-->
    <bean id="carFromInstanceFactory" factory-bean="carInstanceFactory" factory-method="getCar">
        <constructor-arg value="audi"></constructor-arg>
    </bean>


    <!--
    Use FactoryBean to config bean
    -->
    <bean id="carFromFactoryBean" class="spring.core.di.beans.CarFactoryBean">
        <property name="brand" value="Nissan"/>
    </bean>
</beans>